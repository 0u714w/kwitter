{"ast":null,"code":"import { push } from 'connected-react-router';\nimport { IS_LOGGING_IN, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL } from './types';\nvar api = 'https://kwitter-api.herokuapp.com';\nexport var userLogin = function userLogin(username, password) {\n  return function (dispatch) {\n    dispatch(isLoggingIn());\n    var header = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"username\": username,\n        \"password\": password\n      })\n    };\n    fetch(\"\".concat(api, \"/auth/login\"), header).then(function (response) {\n      return response.json();\n    }).then(function (loginResponse) {\n      //add code to push to new URL after this fetch is completed so that it goes to profile page\n      if (loginResponse.success) {\n        dispatch(userLoginSuccess(loginResponse.token, loginResponse.success, loginResponse.id));\n        dispatch(push('/home'));\n      } else {\n        dispatch(userLoginFail());\n        alert(\"Invalid username or password\");\n      }\n    }).catch(function (error) {\n      return dispatch(userLoginFail());\n    });\n  };\n};\nexport var userLoginSuccess = function userLoginSuccess(token, success, userID) {\n  return {\n    type: USER_LOGIN_SUCCESS,\n    payload: {\n      token: token,\n      isLoginSuccess: success,\n      userID: userID\n    }\n  };\n};\nexport var isLoggingIn = function isLoggingIn() {\n  return {\n    type: IS_LOGGING_IN\n  };\n};\nexport var userLoginFail = function userLoginFail() {\n  return {\n    type: USER_LOGIN_FAIL\n  };\n};","map":{"version":3,"sources":["/Users/douglassenas/kwitter/src/components/loginAction.js"],"names":["push","IS_LOGGING_IN","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","api","userLogin","username","password","dispatch","isLoggingIn","header","method","headers","body","JSON","stringify","fetch","then","response","json","loginResponse","success","userLoginSuccess","token","id","userLoginFail","alert","catch","error","userID","type","payload","isLoginSuccess"],"mappings":"AAAA,SAASA,IAAT,QAAqB,wBAArB;AACA,SAASC,aAAT,EAAwBC,kBAAxB,EAA4CC,eAA5C,QAAmE,SAAnE;AAEA,IAAMC,GAAG,GAAG,mCAAZ;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,QAAD,EAAYC,QAAZ;AAAA,SAAyB,UAACC,QAAD,EAAc;AAC7DA,IAAAA,QAAQ,CAACC,WAAW,EAAZ,CAAR;AACA,QAAMC,MAAM,GAAG;AACbC,MAAAA,MAAM,EAAE,MADK;AAEbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFI;AAKbC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnB,oBAAWT,QADQ;AAEnB,oBAAWC;AAFQ,OAAf;AALO,KAAf;AAYAS,IAAAA,KAAK,WAAIZ,GAAJ,kBAAsBM,MAAtB,CAAL,CACGO,IADH,CACQ,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KADhB,EAEGF,IAFH,CAEQ,UAAAG,aAAa,EAAI;AACnB;AACF,UAAIA,aAAa,CAACC,OAAlB,EAA2B;AACzBb,QAAAA,QAAQ,CAACc,gBAAgB,CAACF,aAAa,CAACG,KAAf,EAAqBH,aAAa,CAACC,OAAnC,EAA4CD,aAAa,CAACI,EAA1D,CAAjB,CAAR;AACAhB,QAAAA,QAAQ,CAACR,IAAI,CAAC,OAAD,CAAL,CAAR;AACD,OAHD,MAGK;AACHQ,QAAAA,QAAQ,CAACiB,aAAa,EAAd,CAAR;AACAC,QAAAA,KAAK,CAAC,8BAAD,CAAL;AACD;AACF,KAXH,EAWKC,KAXL,CAWW,UAAAC,KAAK;AAAA,aAAIpB,QAAQ,CAACiB,aAAa,EAAd,CAAZ;AAAA,KAXhB;AAaD,GA3BuB;AAAA,CAAlB;AA6BN,OAAO,IAAMH,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAQF,OAAR,EAAiBQ,MAAjB,EAA4B;AACzD,SAAO;AACLC,IAAAA,IAAI,EAAE5B,kBADD;AAEL6B,IAAAA,OAAO,EAAE;AACLR,MAAAA,KAAK,EAALA,KADK;AAELS,MAAAA,cAAc,EAAEX,OAFX;AAGLQ,MAAAA,MAAM,EAANA;AAHK;AAFJ,GAAP;AAQD,CATK;AAWP,OAAO,IAAMpB,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC9B,SAAO;AACLqB,IAAAA,IAAI,EAAE7B;AADD,GAAP;AAGD,CAJK;AAMN,OAAO,IAAMwB,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjC,SAAO;AACLK,IAAAA,IAAI,EAAE3B;AADD,GAAP;AAGD,CAJM","sourcesContent":["import { push } from 'connected-react-router';\nimport { IS_LOGGING_IN, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL } from './types'\n\nconst api = 'https://kwitter-api.herokuapp.com'\n\nexport const userLogin = (username , password) => (dispatch) => {\n   dispatch(isLoggingIn());\n   const header = {\n     method: \"POST\",\n     headers: {\n       \"Content-Type\": \"application/json\"\n     },\n     body: JSON.stringify({\n       \"username\":username,\n       \"password\":password,\n     })\n   }\n   \n   \n   fetch(`${api}/auth/login`, header)\n     .then(response => response.json())\n     .then(loginResponse => {\n         //add code to push to new URL after this fetch is completed so that it goes to profile page\n       if( loginResponse.success ){\n         dispatch(userLoginSuccess(loginResponse.token,loginResponse.success, loginResponse.id))\n         dispatch(push('/home'))\n       }else{\n         dispatch(userLoginFail())\n         alert(\"Invalid username or password\")\n       }\n     }).catch(error => dispatch(userLoginFail()))\n   \n }\n\n export const userLoginSuccess = (token, success, userID) => {\n    return {\n      type: USER_LOGIN_SUCCESS, \n      payload: {\n          token,\n          isLoginSuccess: success,\n          userID\n      }\n    }\n  }\n\n export const isLoggingIn = () => {\n    return {\n      type: IS_LOGGING_IN\n    }\n  }\n\n  export const userLoginFail = () => {\n    return {\n      type: USER_LOGIN_FAIL\n    }\n  }"]},"metadata":{},"sourceType":"module"}